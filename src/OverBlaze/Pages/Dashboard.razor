@page "/Dashboard"
@using OverBlaze.Services
@using Blazored.LocalStorage
@inject ImageStore ImageStore;
@inject ControlBus ControlBus
@inject IModalService Modal;
@inject TwitchAuth TwitchAuth;
@inject NavigationManager NavigationManager;
@inject ILocalStorageService LocalStorageService;

<h1>Dashboard!</h1>

<div class="row">
@foreach (var imageName in _imageNames)
{
  <div class="col-1">
    <button @onclick="_ => ImageClick(imageName)" class="btn btn-outline-secondary btn-lg">@imageName</button>
  </div>
}
</div>

<hr>

<a href="/AddImage" class="btn btn-primary">Upload new image</a>
<br>
<a href="/AddSound" class="btn btn-primary">Upload new sound</a>


@code {

  bool _perryVisible;

  string[] _imageNames = Array.Empty<string>();

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (string.IsNullOrEmpty(TwitchAuth.Token))
    {
      var accessToken = await LocalStorageService.GetItemAsStringAsync("twitch_access_token");
      var idToken = await LocalStorageService.GetItemAsStringAsync("twitch_id_token");
      if (!TwitchAuth.TrySetTokens(idToken, accessToken))
      {
        var authenticationUri = TwitchAuth.GetAuthenticationUri();
        NavigationManager.NavigateTo(authenticationUri);
      }
    }
    _imageNames = ImageStore.GetImageNames().ToArray();
    StateHasChanged();
  }

  async Task ImageClick(string imageName)
  {
    await ControlBus.AddAsync(new ToggleImage(imageName));
  }

}