@page "/Dashboard"
@using OverBlaze.Services
@using Blazored.LocalStorage
@inject ImageStore ImageStore;
@inject ControlBus ControlBus
@inject IModalService Modal;
@inject TwitchAuth TwitchAuth;
@inject NavigationManager NavigationManager;
@inject ILocalStorageService LocalStorageService;

<h3>Dashboard</h3>

@foreach (var imageName in _imageNames)
{
  <button @onclick="_ => ImageClick(imageName)">@imageName</button>
}

@* <button @onclick="PerryClick">Perry</button> *@

<button @onclick="UploadNewImage">Upload new image...</button>

@code {

  bool _perryVisible;

  string[] _imageNames = Array.Empty<string>();

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (string.IsNullOrEmpty(TwitchAuth.Token))
    {
      var accessToken = await LocalStorageService.GetItemAsStringAsync("twitch_access_token");
      var idToken = await LocalStorageService.GetItemAsStringAsync("twitch_id_token");
      if (!TwitchAuth.TrySetTokens(idToken, accessToken))
      {
        var authenticationUri = TwitchAuth.GetAuthenticationUri();
        NavigationManager.NavigateTo(authenticationUri);
      }
    }
    _imageNames = ImageStore.GetImageNames().ToArray();
  }

  async Task ImageClick(string imageName)
  {
    
  }

  async Task PerryClick()
  {
    await ControlBus.AddAsync(new ToggleImage
    {
      Path = "/Perry_the_platypus.png",
      Style = "height: 30vh; left: 40vw; top: 35vh; position: absolute;",
    });
  }

  private void UploadNewImage()
  {
    Modal.Show<ImageUpload>("Upload new image");
  }

}