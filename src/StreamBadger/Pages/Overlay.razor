@page "/Overlay"
@using StreamBadger.Services
@using StreamBadger.Models
@layout EmptyLayout
@inject ControlBus ControlBus
@inject ImageStore ImageStore
@inject SoundStore SoundStore
@inject IJSRuntime JS

@foreach (var image in _images)
{
<img src="/images/@image.Name.TrimStart('/')" style="@image.Style" class="ob-image" />
}

@foreach (var sound in _sounds)
{
  <audio id="@sound.Name" src="/sounds/@sound.Name.TrimStart('/')"/>
}

@code {

  List<ImageModel> _images = new();
  List<SoundModel> _sounds = new();
  Dictionary<string, Action> _soundImages = new();
  Queue<string> _soundsToPlay = new();

  protected override Task OnInitializedAsync()
  {
    ControlBus.ToggleImage += ToggleImage;
    ControlBus.PlaySound += PlaySound;
    ControlBus.ClearAll += ClearAll;
    return Task.CompletedTask;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender) return;
    if (_soundsToPlay.Count == 0) return;
    var dotnetHelper = DotNetObjectReference.Create(this);
    while (_soundsToPlay.TryDequeue(out var sound))
    {
      await JS.InvokeVoidAsync("playSound", sound, dotnetHelper);
    }
  }

  private async Task ClearAll()
  {
    _images.Clear();
    _sounds.Clear();
    await InvokeAsync(StateHasChanged);
  }

  private async Task PlaySound(PlaySound play)
  {
    var sound = await SoundStore.GetSound(play.Name);
    if (sound is null) return;
    _sounds.Add(sound);
    _soundsToPlay.Enqueue(sound.Name);
    await InvokeAsync(StateHasChanged);
  }

  private async Task ToggleImage(ToggleImage toggle)
  {
    SoundModel? sound = null;
    ImageModel? image = null;
    
    var existing = _images.FirstOrDefault(i => i.Name == toggle.Name);
    if (existing is not null)
    {
      _images.Remove(existing);
    }
    else
    {
      image = await ImageStore.GetImage(toggle.Name);
      if (image is null) return;
      _images.Add(image);
      if (image.Sound is not null)
      {
        sound = await SoundStore.GetSound(image.Sound);
        if (sound is not null)
        {
          _sounds.Add(sound);
        }
      }
    }
    await InvokeAsync(StateHasChanged);
    
    if (sound is not null)
    {
      Action callback = () =>
      {
        _images.Remove(image);
        _sounds.Remove(sound);
      };
      _soundImages[sound.Name] = callback;
      var callbackRef = DotNetObjectReference.Create(this);
      _soundsToPlay.Enqueue(sound.Name);
    }
  }

  [JSInvokable]
  public void OnSoundEnded(string id)
  {
    if (_soundImages.TryGetValue(id, out var callback))
    {
      _soundImages.Remove(id);
      callback();
      StateHasChanged();
    }
  }
}